const e=await import("../../token-action-hud-core/scripts/token-action-hud-core.min.js"),t=e.ActionHandler,i=e.ActionListExtender,s=e.CategoryManager,a=e.PreRollHandler,n=e.RollHandler,o=e.SystemManager,r=e.Utils,l=e.Logger,c="token-action-hud-titan";function getSetting(e,t=null){let i=t??null;try{i=game.settings.get(c,e)}catch{l.debug(`Setting '${e}' not found`)}return i}async function setSetting(e,t){game.settings.settings.get(`${c}.${e}`)?(t=await game.settings.set(c,e,t),l.debug(`Setting '${e}' set to '${t}'`)):l.debug(`Setting '${e}' not found`)}function localize(e){return game.i18n.localize(`tokenActionHud.titan.${e}.label`)}function getControlledActors(){return Array.from(canvas.tokens.controlled.filter((e=>e.actor)).map((e=>e.actor)))}function getControlledTokens(){return Array.from(canvas.tokens.controlled).filter((e=>e.actor))}let d=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{d=class ActionHandlerClass extends e.api.ActionHandler{async buildSystemActions(e){if(1===getControlledActors().length){const t=this.actor?.id,i=this.token?.id;return await this._buildSingleCharacterActions(t,i,this.actor,e)}return await this._buildMultiCharacterActions()}async _buildSingleCharacterActions(e,t,i){await this._buildAttributesGroup(e,t),await this._buildResistancesGroup(e,t),await this._buildSkillsGroup(e,t),await this._buildWeaponsCategory(e,t,i),await this._buildEquipmentGroup(e,t,i),await this._buildAbilitiesCategory(e,t,i),await this._buildSpellsCategory(e,t,i),await this._buildRecoveryGroup(e,t),await this._buildResourcesGroup(e,t,i),await this._buildEffectsGroup(e,t,i)}async _buildMultiCharacterActions(){const e="multi",t="multi";await this._buildAttributesGroup(e,t),await this._buildResistancesGroup(e,t),await this._buildSkillsGroup(e,t),await this._buildRecoveryGroup(e,t),await this._buildResourcesGroup(e,t),await this._buildEffectsGroup(e,t)}async _buildAttributesGroup(e,t){const i=["body","mind","soul"].map((i=>({id:i,name:localize(i),encodedValue:[e,t,"attributeCheck",i].join(this.delimiter)})));await this.addActions(i,{id:"attributes",type:"system"})}async _buildSkillsGroup(e,t){const i=["arcana","athletics","deception","dexterity","diplomacy","engineering","intimidation","investigation","lore","medicine","meleeWeapons","metaphysics","nature","perception","performance","rangedWeapons","subterfuge","stealth"].map((i=>({id:i,name:localize(i),encodedValue:[e,t,"skillCheck",i].join(this.delimiter)})));return await this.addActions(i,{id:"skills",type:"system"})}async _buildResistancesGroup(e,t){const i=["reflexes","resilience","willpower"].map((i=>({id:i,name:localize(i),encodedValue:[e,t,"resistanceCheck",i].join(this.delimiter)})));return await this.addActions(i,{id:"resistances",type:"system"})}async _buildWeaponsCategory(e,t,i){const s=i.items.filter((e=>"weapon"===e.type&&(e.system.attack.length>0||e.system.check.length>0)&&(getSetting("showUnEquippedEquipment")||e.system.equipped))).sort(((e,t)=>e.sort<t.sort?-1:e.sort>t.sort?1:0)),a=Math.min(s.length,getSetting("maxWeapons"));for(let i=0;i<a;i++){const a=s[i];await this._buildWeaponGroup(e,t,a,i)}}async _buildWeaponGroup(e,t,i,s){const a=i._id,n=i.system.attack.map(((i,s)=>({id:`${a}|attack,${s}`,name:i.label,encodedValue:[e,t,"attackCheck",a,s].join(this.delimiter),icon1:"melee"===i.type?'<i class="fas fa-sword"></i>':'<i class="fas fa-bow-arrow"></i>'}))),o=i.system.check.map(((i,s)=>({id:`${a}|itemCheck,${s}`,name:i.label,encodedValue:[e,t,"itemCheck",a,s].join(this.delimiter),icon1:'<i class="fas fa-dice"></i>'}))),l={id:`${a}|toggleMultiAttack`,name:localize(i.system.multiAttack?"multiAttackOn":"multiAttackOff"),encodedValue:[e,t,"toggleMultiAttack",a].join(this.delimiter),icon1:i.system.multiAttack?'<i class="fas fa-swords"></i>':'<i class="fas fa-sword"></i>'},c={id:`weapon${s}`,type:"system"},d=this._getGroup(c);return d.name=i.name,d.img=r.getImage(i),await this.addActions([...n,...o,l],c)}async _buildEquipmentGroup(e,t,i){const s=i.items.filter((e=>{if(e.system.check.length>0)switch(e.type){case"weapon":case"ability":case"spell":return!1;case"armor":return getSetting("showUnEquippedEquipment")||i.system.equipped.armor===e._id;case"shield":return getSetting("showUnEquippedEquipment")||i.system.equipped.shield===e._id;default:return!(!getSetting("showUnEquippedEquipment")&&void 0!==e.system.equipped)||e.system.equipped}return!1})).sort(((e,t)=>e.sort<t.sort?-1:e.sort>t.sort?1:0)),a=[];return s.forEach((i=>{const s=i._id;i.system.check.forEach(((n,o)=>{a.push({id:`${s}|itemCheck`,name:`${i.name} (${n.label})`,encodedValue:[e,t,"itemCheck",s,o].join(this.delimiter),img:r.getImage(i)})}))})),await this.addActions(a,{id:"equipment",type:"system"})}async _buildAbilitiesCategory(e,t,i){const s=i.items.filter((e=>"ability"===e.type&&e.system.check.length>0)).sort(((e,t)=>e.sort<t.sort?-1:e.sort>t.sort?1:0)),a=[];return s.forEach((i=>{const s=i._id;i.system.check.forEach(((n,o)=>{a.push({id:`${s}|itemCheck`,name:`${i.name} (${n.label})`,encodedValue:[e,t,"itemCheck",s,o].join(this.delimiter),img:r.getImage(i)})}))})),await this.addActions(a,{id:"abilities",type:"system"})}async _buildSpellsCategory(e,t,i){const s=i.items.filter((e=>"spell"===e.type)).sort(((e,t)=>e.sort<t.sort?-1:e.sort>t.sort?1:0)),a=[];s.forEach((e=>{-1===a.indexOf(e.system.tradition)&&a.push(e.system.tradition)}));const n=Math.min(s.length,getSetting("maxSpellTraditions"));for(let i=0;i<n;i++){const n=a[i];await this._buildSpellTraditionGroup(e,t,n,s,i)}}async _buildSpellTraditionGroup(e,t,i,s,a){const n=s.filter((e=>e.system.tradition===i)),o=[];n.forEach((i=>{const s=i._id;o.push({id:`${s}|castingCheck`,name:`${i.name}`,encodedValue:[e,t,"castingCheck",s].join(this.delimiter),img:r.getImage(i)}),i.system.check.forEach(((a,n)=>{o.push({id:`${s}|itemCheck`,name:`${i.name} (${a.label})`,encodedValue:[e,t,"itemCheck",s,n].join(this.delimiter),img:r.getImage(i)})}))}));const l={id:`tradition${a}`,type:"system"};return this._getGroup(l).name=i,await this.addActions(o,l)}async _buildRecoveryGroup(e,t){const i=[{id:"longRest",name:localize("longRest"),encodedValue:[e,t,"longRest"].join(this.delimiter),icon1:'<i class="fas fa-bed"></i>'},{id:"shortRest",name:localize("shortRest"),encodedValue:[e,t,"shortRest"].join(this.delimiter),icon1:'<i class="fas fa-face-exhaling"></i>'},{id:"removeCombatEffects",name:localize("removeCombatEffects"),encodedValue:[e,t,"removeCombatEffects"].join(this.delimiter),icon1:'<i class="fas fa-arrow-rotate-left"></i>'}];return await this.addActions(i,{id:"recovery",type:"system"})}async _buildResourcesGroup(e,t,i){const s=[{id:"spendResolve",name:localize("spendResolve"),encodedValue:[e,t,"spendResolve"].join(this.delimiter),icon1:'<i class="fas fa-bolt"></i>'}];return"player"===i?.type&&s.push({id:"toggleInspiration",name:localize("inspiration"),encodedValue:[e,t,"toggleInspiration"].join(this.delimiter),icon1:i.system.inspiration?'<i class="fas fa-sun"></i>':'<i class="far fa-circle"></i>'}),await this.addActions(s,{id:"resources",type:"system"})}async _buildEffectsGroup(e,t){const i=[{id:"removeExpiredEffects",name:localize("removeExpiredEffects"),encodedValue:[e,t,"removeExpiredEffects"].join(this.delimiter),icon1:'<i class="fas fa-clock"></i>'}];return await this.addActions(i,{id:"effects",type:"system"})}}}));let u=null;function register(e){const t="token-action-hud-titan";game.settings.register(t,"showUnEquippedEquipment",{name:game.i18n.localize("tokenActionHud.titan.settings.showUnEquippedEquipment.label"),hint:game.i18n.localize("tokenActionHud.titan.settings.showUnEquippedEquipment.hint"),scope:"client",config:!0,type:Boolean,default:!1,onChange:t=>{e(t)}}),game.settings.register(t,"maxWeapons",{name:game.i18n.localize("tokenActionHud.titan.settings.maxWeapons.label"),hint:game.i18n.localize("tokenActionHud.titan.settings.maxWeapons.hint"),scope:"client",config:!0,type:Number,default:5,range:{min:3,max:10,step:1},requiresReload:!0,onChange:t=>{e(t)}}),game.settings.register(t,"maxSpellTraditions",{name:game.i18n.localize("tokenActionHud.titan.settings.maxSpellTraditions.label"),hint:game.i18n.localize("tokenActionHud.titan.settings.maxSpellTraditions.hint"),scope:"client",config:!0,type:Number,default:5,range:{min:3,max:10,step:1},requiresReload:!0,onChange:t=>{e(t)}})}function createDefaults(){const e=getSetting("maxWeapons"),t=getSetting("maxSpellTraditions"),i=[];for(let t=0;t<e;t++)i.push({nestId:`weapons_weapon${t}`,id:`weapon${t}`,name:"",type:"system"});const s=[];for(let e=0;e<t;e++)s.push({nestId:`spells_tradition${e}`,id:`tradition${e}`,name:"",type:"system"});const a={nestId:"attributes_attributes",id:"attributes",name:localize("attributes"),type:"system"},n={nestId:"attributes_test",id:"test",name:"test",type:"system"},o={nestId:"resistances_resistances",id:"resistances",name:localize("resistances"),type:"system"},r={nestId:"skills_skills",id:"skills",name:localize("skills"),type:"system"},l={nestId:"equipment_equipment",id:"equipment",name:localize("equipment"),type:"system"},c={nestId:"abilities_abilities",id:"abilities",name:localize("abilities"),type:"system"},d={nestId:"utility_recovery",id:"recovery",name:localize("recovery"),type:"system"},u={nestId:"utility_resources",id:"resources",name:localize("resources"),type:"system"},m={nestId:"utility_effects",id:"effects",name:localize("effects"),type:"system"},p=[a,n,o,r,...i,l,c,...s,d,u,m];return{layout:[{nestId:"attributes",id:"attributes",name:localize("attributes"),groups:[a,n]},{nestId:"resistances",id:"resistances",name:localize("resistances"),groups:[o]},{nestId:"skills",id:"skills",name:localize("skills"),groups:[r]},{nestId:"weapons",id:"weapons",name:localize("weapons"),groups:i},{nestId:"equipment",id:"equipment",name:localize("equipment"),groups:[l]},{nestId:"abilities",id:"abilities",name:localize("abilities"),groups:[c]},{nestId:"spells",id:"spells",name:localize("spells"),groups:s},{nestId:"utility",id:"utility",name:localize("utility"),groups:[d,u,m]}],groups:p}}Hooks.once("tokenActionHudCoreApiReady",(async e=>{u=class RollHandlerClass extends e.api.RollHandler{async doHandleActionEvent(e,t){const i=t.split("|");if(i.length<3)return void console.error("TOKEN ACTION HUD (TITAN) | Action Failed. Incomplete Action Data.");const s=i[0],a=i[1],n=i[2];if(i.splice(0,3),"multi"!==a){const e=r.getActor(s,a)?.character;if(e)return await this._performAction(n,i,e)}else for(const e of canvas.tokens.controlled){const t=r.getActor(e.actor?.id,e.id)?.character;t&&await this._performAction(n,i,t)}}async _performAction(e,t,i){switch(e){case"attributeCheck":{const e=t[0];return e?await i.rollAttributeCheck({attribute:e},!1):void console.error("TOKEN ACTION HUD (TITAN) | Attribute Check Failed. No provided Attribute.")}case"resistanceCheck":{const e=t[0];return e?await i.rollResistanceCheck({resistance:e},!1):void console.error("TOKEN ACTION HUD (TITAN) | Resistance Check Failed. No provided Resistance.")}case"skillCheck":{const e=t[0];return e?await i.rollAttributeCheck({skill:e},!1):void console.error("TOKEN ACTION HUD (TITAN) | Skill Check Failed. No provided Skill.")}case"attackCheck":{const e=t[0];if(!e)return console.error("TOKEN ACTION HUD (TITAN) | Attack Check Failed. No provided Weapon ID."),void console.trace();const s=t[1];return s?await i.rollAttackCheck({itemId:e,attackIdx:s},!1):(console.error("TOKEN ACTION HUD (TITAN) | Attack Check Failed. No provided Attack IDX."),void console.trace())}case"toggleMultiAttack":{const e=t[0];return e?await i.toggleMultiAttack(e):(console.error("TOKEN ACTION HUD (TITAN) | Toggle Multi-Attack Failed. No provided Weapon ID."),void console.trace())}case"itemCheck":{const e=t[0];if(!e)return console.error("TOKEN ACTION HUD (TITAN) | Item Check Failed. No provided Item ID."),void console.trace();const s=t[1];return s?await i.rollItemCheck({itemId:e,checkIdx:s},!1):(console.error("TOKEN ACTION HUD (TITAN) | Item Check Failed. No provided Check IDX."),void console.trace())}case"castingCheck":{const e=t[0];return e?await i.rollCastingCheck({itemId:e},!1):(console.error("TOKEN ACTION HUD (TITAN) | Casting Check Failed. No provided Item ID."),void console.trace())}case"longRest":return await i.longRest(!0);case"shortRest":return await i.shortRest(!0);case"removeCombatEffects":return await i.removeCombatEffects(!0);case"removeExpiredEffects":return await i.removeExpiredEffects(!1);case"spendResolve":return await i.spendResolve(1,1,!0);case"toggleInspiration":return await i.toggleInspiration();default:return console.error(`TOKEN ACTION HUD (TITAN) | Action. Invalid action type (${e}).`),void console.trace()}}}}));let m=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{m=class SystemManagerClass extends e.api.SystemManager{doGetCategoryManager(){return new s}doGetActionHandler(e){return new d(e)}getAvailableRollHandlers(){const e={core:"Core Titan"};return o.addHandler(e),e}doGetRollHandler(){return new u}doRegisterSettings(e){register(e)}async doRegisterDefaultFlags(){return createDefaults()}}}));const p={ID:"token-action-hud-titan"},g={ID:"token-action-hud-core"},h="1.4";Hooks.on("tokenActionHudCoreApiReady",(async()=>{const e=game.modules.get(p.ID);e.api={requiredCoreModuleVersion:"1.4",SystemManager:m},Hooks.call("tokenActionHudSystemReady",e),console.log("Token Action HUD TITAN | Initialized")}));export{d as ActionHandler,g as CORE_MODULE,t as CoreActionHandler,i as CoreActionListExtender,s as CoreCategoryManager,a as CorePreRollHandler,n as CoreRollHandler,o as CoreSystemManager,r as CoreUtils,l as Logger,p as MODULE,h as REQUIRED_CORE_MODULE_VERSION,u as RollHandler,m as SystemManager,createDefaults,getControlledActors,getControlledTokens,getSetting,localize,register,setSetting};
