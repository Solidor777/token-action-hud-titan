const e=await import("../../token-action-hud-core/scripts/token-action-hud-core.min.js"),t=e.ActionHandler,i=e.ActionListExtender,s=e.CategoryManager,a=e.PreRollHandler,o=e.RollHandler,n=e.SystemManager,r=e.Utils,c=e.Logger,l="token-action-hud-titan";function getSetting(e,t=null){let i=t??null;try{i=game.settings.get(l,e)}catch{c.debug(`Setting '${e}' not found`)}return i}async function setSetting(e,t){game.settings.settings.get(`${l}.${e}`)?(t=await game.settings.set(l,e,t),c.debug(`Setting '${e}' set to '${t}'`)):c.debug(`Setting '${e}' not found`)}function localize(e){return game.i18n.localize(`tokenActionHud.titan.${e}.label`)}function getOptions(){const e=!0===game.settings.get("titan","getCheckOptions");return game.keyboard.isModifierActive(KeyboardManager.MODIFIER_KEYS.SHIFT)?!e:e}class ActionHandler extends t{_addSubcategoryToCategory(e,t){this.actionList.categories.forEach((i=>{i.id===t&&(i.subcategories=[...i.subcategories,e])}))}async buildSystemActions(e,t){const i=e?.actor;if(i){const s=e?.actor?.id,a=e?.token?.id;return this._buildSingleCharacterActions(s,a,i,t)}return this._buildMultiCharacterActions()}_buildSingleCharacterActions(e,t,i){this._buildAttributesSubcategory(e,t),this._buildResistancesSubcategory(e,t),this._buildSkillsSubcategory(e,t),this._buildWeaponsCategory(e,t,i),this._buildEquipmentSubcategory(e,t,i),this._buildAbilitiesCategory(e,t,i),this._buildSpellsCategory(e,t,i),this._buildRecoverySubcategory(e,t),this._buildResourcesSubcategory(e,t,i)}_buildMultiCharacterActions(){const e="multi",t="multi";this._buildAttributesSubcategory(e,t),this._buildResistancesSubcategory(e,t),this._buildSkillsSubcategory(e,t),this._buildRecoverySubcategory(e,t),this._buildResourcesSubcategory(e,t)}_buildAttributesSubcategory(e,t){const i=["body","mind","soul"].map((i=>({id:i,name:localize(i),encodedValue:[e,t,"attributeCheck",i].join(this.delimiter)})));this.addActionsToActionList(i,{id:"attributes",type:"system"})}_buildSkillsSubcategory(e,t){const i=["arcana","athletics","deception","dexterity","diplomacy","engineering","intimidation","investigation","lore","medicine","meleeWeapons","metaphysics","nature","perception","performance","rangedWeapons","subterfuge","stealth"].map((i=>({id:i,name:localize(i),encodedValue:[e,t,"skillCheck",i].join(this.delimiter)})));return this.addActionsToActionList(i,{id:"skills",type:"system"})}_buildResistancesSubcategory(e,t){const i=["reflexes","resilience","willpower"].map((i=>({id:i,name:localize(i),encodedValue:[e,t,"resistanceCheck",i].join(this.delimiter)})));return this.addActionsToActionList(i,{id:"resistances",type:"system"})}_buildWeaponsCategory(e,t,i){i.items.filter((e=>"weapon"===e.type&&(e.system.attack.length>0||e.system.check.length>0)&&(getSetting("showUnEquippedEquipment")||e.system.equipped))).sort(((e,t)=>e.sort<t.sort?-1:e.sort>t.sort?1:0)).forEach((i=>this._buildWeaponSubcategory(e,t,i)))}_buildWeaponSubcategory(e,t,i){const s=i._id,a=i.system.attack.map(((i,a)=>({id:`${s},attack,${a}`,name:i.label,encodedValue:[e,t,"attackCheck",s,a].join(this.delimiter),icon:"melee"===i.type?'<i class="fas fa-sword"></i>':'<i class="fas fa-bow-arrow"></i>'}))),o=i.system.check.map(((i,a)=>({id:`${s},itemCheck,${a}`,name:i.label,encodedValue:[e,t,"itemCheck",s,a].join(this.delimiter),icon:'<i class="fas fa-dice"></i>'}))),n={id:`${s},toggleMultiAttack`,name:localize(i.system.multiAttack?"multiAttackOn":"multiAttackOff"),encodedValue:[e,t,"toggleMultiAttack",s].join(this.delimiter),icon:i.system.multiAttack?'<i class="fas fa-swords"></i>':'<i class="fas fa-sword"></i>'},r={id:s,nestId:s,name:i.name,type:"system"};return this.addSubcategoryToActionList({id:"weapons",type:"system"},r),this.addActionsToActionList([...a,...o,n],{id:s,type:"system"})}_buildEquipmentSubcategory(e,t,i){const s=i.items.filter((e=>{if(e.system.check.length>0)switch(e.type){case"weapon":case"ability":case"spell":return!1;case"armor":return getSetting("showUnEquippedEquipment")||i.system.equipped.armor===e._id;case"shield":return getSetting("showUnEquippedEquipment")||i.system.equipped.shield===e._id;default:return!(!getSetting("showUnEquippedEquipment")&&void 0!==e.system.equipped)||e.system.equipped}})).sort(((e,t)=>e.sort<t.sort?-1:e.sort>t.sort?1:0)),a=[];return s.forEach((i=>{const s=i._id;i.system.check.forEach(((o,n)=>{a.push({id:`${s},itemCheck`,name:`${i.name} (${o.label})`,encodedValue:[e,t,"itemCheck",s,n],img:this.getImage(i)})}))})),this.addActionsToActionList(a,"equipment")}_buildAbilitiesCategory(e,t,i){const s=i.items.filter((e=>"ability"===e.type&&e.system.check.length>0)).sort(((e,t)=>e.sort<t.sort?-1:e.sort>t.sort?1:0)),a=[];return s.forEach((i=>{const s=i._id;i.system.check.forEach(((o,n)=>{a.push({id:`${s},itemCheck`,name:`${i.name} (${o.label})`,encodedValue:[e,t,"itemCheck",s,n],img:this.getImage(i)})}))})),this.addActionsToActionList(a,"abilities")}_buildSpellsCategory(e,t,i){const s=i.items.filter((e=>"spell"===e.type)).sort(((e,t)=>e.sort<t.sort?-1:e.sort>t.sort?1:0)),a=[];s.forEach((e=>{-1===a.indexOf(e.system.tradition)&&a.push(e.system.tradition)})),a.forEach((i=>{this._buildTraditionSubcategory(e,t,i,s)}))}_buildTraditionSubcategory(e,t,i,s){const a=s.filter((e=>e.system.tradition===i)),o=[];a.forEach((i=>{const s=i._id;o.push({id:`${s},castingCheck`,name:`${i.name}`,encodedValue:[e,t,"castingCheck",s],img:this.getImage(i)}),i.system.check.forEach(((a,n)=>{o.push({id:`${s},itemCheck`,name:`${i.name} (${a.label})`,encodedValue:[e,t,"itemCheck",s,n],img:this.getImage(i)})}))}));const n=this.initializeEmptySubcategory(i,"spells",i,"system");return this._addSubcategoryToCategory(n,"spells"),this.addActionsToActionList(o,i)}_buildRecoverySubcategory(e,t){const i=[{id:"longRest",name:localize("longRest"),encodedValue:[e,t,"longRest"],icon:'<i class="fas fa-bed"></i>'},{id:"shortRest",name:localize("shortRest"),encodedValue:[e,t,"shortRest"],icon:'<i class="fas fa-face-exhaling"></i>'},{id:"removeTemporaryEffects",name:localize("removeTemporaryEffects"),encodedValue:[e,t,"removeTemporaryEffects"],icon:'<i class="fas fa-arrow-rotate-left"></i>'}];return this.addActionsToActionList(i,"recovery")}_buildResourcesSubcategory(e,t,i){const s=[{id:"spendResolve",name:localize("spendResolve"),encodedValue:[e,t,"spendResolve"],icon:'<i class="fas fa-bolt"></i>'}];return"player"===i?.type&&s.push({id:"toggleInspiration",name:localize("inspiration"),encodedValue:[e,t,"toggleInspiration"],icon:i.system.inspiration?'<i class="fas fa-sun"></i>':'<i class="far fa-circle"></i>'}),this.addActionsToActionList(s,"resources")}}class RollHandler extends o{async doHandleActionEvent(e,t){const i=t.split("|");if(i.length<3)return void console.error("TOKEN ACTION HUD (TITAN) | Action Failed. Incomplete Action Data.");const s=i[0],a=i[1],o=i[2];if(i.splice(0,3),"multi"!==a){const e=r.getActor(s,a)?.character;if(e)return await this._performAction(o,i,e)}else for(const e of canvas.tokens.controlled){const t=r.getActor(e.actor?.id,e.id)?.character;t&&await this._performAction(o,i,t)}}async _performAction(e,t,i){switch(e){case"attributeCheck":{const e=t[0];return e?await i.rollAttributeCheck({attribute:e,getOptions:getOptions()}):void console.error("TOKEN ACTION HUD (TITAN) | Attribute Check Failed. No provided Attribute.")}case"resistanceCheck":{const e=t[0];return e?await i.rollResistanceCheck({resistance:e,getOptions:getOptions()}):void console.error("TOKEN ACTION HUD (TITAN) | Resistance Check Failed. No provided Resistance.")}case"skillCheck":{const e=t[0];return e?await i.rollAttributeCheck({skill:e,getOptions:getOptions()}):void console.error("TOKEN ACTION HUD (TITAN) | Skill Check Failed. No provided Skill.")}case"attackCheck":{const e=t[0];if(!e)return console.error("TOKEN ACTION HUD (TITAN) | Attack Check Failed. No provided Weapon ID."),void console.trace();const s=t[1];return s?await i.rollAttackCheck({itemId:e,attackIdx:s,getOptions:getOptions()}):(console.error("TOKEN ACTION HUD (TITAN) | Attack Check Failed. No provided Attack IDX."),void console.trace())}case"toggleMultiAttack":{const e=t[0];return e?await i.toggleMultiAttack(e):(console.error("TOKEN ACTION HUD (TITAN) | Toggle Multi-Attack Failed. No provided Weapon ID."),void console.trace())}case"itemCheck":{const e=t[0];if(!e)return console.error("TOKEN ACTION HUD (TITAN) | Item Check Failed. No provided Item ID."),void console.trace();const s=t[1];return s?await i.rollItemCheck({itemId:e,checkIdx:s,getOptions:getOptions()}):(console.error("TOKEN ACTION HUD (TITAN) | Item Check Failed. No provided Check IDX."),void console.trace())}case"castingCheck":{const e=t[0];return e?await i.rollCastingCheck({itemId:e,getOptions:getOptions()}):(console.error("TOKEN ACTION HUD (TITAN) | Casting Check Failed. No provided Item ID."),void console.trace())}case"longRest":return await i.longRest(!0);case"shortRest":return await i.shortRest(!0);case"removeTemporaryEffects":return await i.removeTemporaryEffects(!0);case"spendResolve":return await i.spendResolve(!0);case"toggleInspiration":return await i.toggleInspiration();default:return console.error(`TOKEN ACTION HUD (TITAN) | Action. Invalid action type (${e}).`),void console.trace()}}}function register(e){game.settings.register("token-action-hud-titan","showUnEquippedEquipment",{name:game.i18n.localize("tokenActionHud.titan.settings.showUnEquippedEquipment.label"),hint:game.i18n.localize("tokenActionHud.titan.settings.showUnEquippedEquipment.hint"),scope:"client",config:!0,type:Boolean,default:!1,onChange:t=>{e(t)}})}const d={categories:[{nestId:"attributes",id:"attributes",name:localize("attributes"),subcategories:[{nestId:"attributes_attributes",id:"attributes",name:localize("attributes"),type:"system",hasDerivedSubcategories:!1}]},{nestId:"resistances",id:"resistances",name:localize("resistances"),subcategories:[{nestId:"resistances_resistances",id:"resistances",name:localize("resistances"),type:"system",hasDerivedSubcategories:!1}]},{nestId:"skills",id:"skills",name:localize("skills"),subcategories:[{nestId:"skills_skills",id:"skills",name:localize("skills"),type:"system",hasDerivedSubcategories:!1}]},{nestId:"weapons",id:"weapons",name:localize("weapons"),subcategories:[{nestId:"weapons_weapons",id:"weapons",name:"",type:"system",hasDerivedSubcategories:!0}]},{nestId:"equipment",id:"equipment",name:localize("equipment"),subcategories:[{nestId:"equipment_equipment",id:"equipment",name:localize("equipment"),type:"system",hasDerivedSubcategories:!1}]},{nestId:"abilities",id:"abilities",name:localize("abilities"),subcategories:[{nestId:"abilities_abilities",id:"abilities",name:localize("abilities"),type:"system",hasDerivedSubcategories:!1}]},{nestId:"spells",id:"spells",name:localize("spells"),subcategories:[]},{nestId:"utility",id:"utility",name:localize("utility"),subcategories:[{nestId:"utility_recovery",id:"recovery",name:localize("recovery"),type:"system"},{nestId:"utility_resources",id:"resources",name:localize("resources"),type:"system"}]}],subcategories:[{id:"attributes",name:localize("attributes"),type:"system",hasDerivedSubcategories:!1},{id:"skills",name:localize("skills"),type:"system",hasDerivedSubcategories:!1},{id:"resistances",name:localize("resistances"),type:"system",hasDerivedSubcategories:!1},{id:"abilities",name:localize("abilities"),type:"system",hasDerivedSubcategories:!1},{id:"utility",name:localize("skills"),type:"system",hasDerivedSubcategories:!1}]};class SystemManager extends n{doGetCategoryManager(){return new s}doGetActionHandler(e){return new ActionHandler(e)}getAvailableRollHandlers(){const e={core:"Core Titan"};return n.addHandler(e),e}doGetRollHandler(e){return new RollHandler}doRegisterSettings(e){register(e)}async doRegisterDefaultFlags(){await r.setUserFlag("default",d),await r.setUserFlag("categories",d.categories),await r.setUserFlag("subcategories",d.subcategories)}}export{t as CoreActionHandler,i as CoreActionListExtender,s as CoreCategoryManager,a as CorePreRollHandler,o as CoreRollHandler,n as CoreSystemManager,r as CoreUtils,c as Logger,RollHandler,SystemManager,getOptions,getSetting,localize,register,setSetting};
