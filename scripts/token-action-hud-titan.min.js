const e="token-action-hud-titan";function getSetting(t,o=null){let n=o??null;return game.settings.settings.get(`${e}.${t}`)&&(n=game.settings.get(e,t)),n}async function setSetting(t,o){game.settings.settings.get(`${e}.${t}`)&&(o=await game.settings.set(e,t,o))}async function importClass(e){return await import(e).then((e=>e.default))}function localize(e){return game.i18n.localize(`tokenActionHud.titan.${e}.label`)}function getOptions(){const e=!0===game.settings.get("titan","getCheckOptions");return game.keyboard.isModifierActive(KeyboardManager.MODIFIER_KEYS.SHIFT)?!e:e}const t=await import("../../token-action-hud-core/scripts/token-action-hud-core.min.js"),o=t.ActionHandler,n=t.ActionListExtender,i=t.CategoryManager,r=t.PreRollHandler,a=t.RollHandler,s=t.SystemManager,c=t.Utils,l=t.Logger;class RollHandler extends a{async doHandleActionEvent(e,t){const o=t.split(",");if(o.length<3)return void console.error("TOKEN ACTION HUD (TITAN) | Action Failed. Incomplete Action Data.");const n=o[0],i=o[1],r=o[2];if(o.splice(0,3),"multi"!==i){const e=super.getActor(n,i)?.character;if(e)return await this._performAction(r,o,e)}else for(const e of canvas.tokens.controlled){const t=super.getActor(e.actor?.id,e.id)?.character;t&&await this._performAction(r,o,t)}}async _performAction(e,t,o){switch(e){case"attributeCheck":{const e=t[0];return e?await o.rollAttributeCheck({attribute:e,getOptions:getOptions()}):void console.error("TOKEN ACTION HUD (TITAN) | Attribute Check Failed. No provided Attribute.")}case"resistanceCheck":{const e=t[0];return e?await o.rollResistanceCheck({resistance:e,getOptions:getOptions()}):void console.error("TOKEN ACTION HUD (TITAN) | Resistance Check Failed. No provided Resistance.")}case"skillCheck":{const e=t[0];return e?await o.rollAttributeCheck({skill:e,getOptions:getOptions()}):void console.error("TOKEN ACTION HUD (TITAN) | Skill Check Failed. No provided Skill.")}case"attackCheck":{const e=t[0];if(!e)return console.error("TOKEN ACTION HUD (TITAN) | Attack Check Failed. No provided Weapon ID."),void console.trace();const n=t[1];return n?await o.rollAttackCheck({itemId:e,attackIdx:n,getOptions:getOptions()}):(console.error("TOKEN ACTION HUD (TITAN) | Attack Check Failed. No provided Attack IDX."),void console.trace())}case"toggleMultiAttack":{const e=t[0];return e?await o.toggleMultiAttack(e):(console.error("TOKEN ACTION HUD (TITAN) | Toggle Multi-Attack Failed. No provided Weapon ID."),void console.trace())}case"itemCheck":{const e=t[0];if(!e)return console.error("TOKEN ACTION HUD (TITAN) | Item Check Failed. No provided Item ID."),void console.trace();const n=t[1];return n?await o.rollItemCheck({itemId:e,checkIdx:n,getOptions:getOptions()}):(console.error("TOKEN ACTION HUD (TITAN) | Item Check Failed. No provided Check IDX."),void console.trace())}case"castingCheck":{const e=t[0];return e?await o.rollCastingCheck({itemId:e,getOptions:getOptions()}):(console.error("TOKEN ACTION HUD (TITAN) | Casting Check Failed. No provided Item ID."),void console.trace())}case"longRest":return await o.longRest(!0);case"shortRest":return await o.shortRest(!0);case"removeTemporaryEffects":return await o.removeTemporaryEffects(!0);case"spendResolve":return await o.spendResolve(!0);case"toggleInspiration":return await o.toggleInspiration();default:return console.error(`TOKEN ACTION HUD (TITAN) | Action. Invalid action type (${e}).`),void console.trace()}}}function register(e){game.settings.register("token-action-hud-titan","showUnEquippedEquipment",{name:game.i18n.localize("tokenActionHud.titan.settings.showUnEquippedEquipment.label"),hint:game.i18n.localize("tokenActionHud.titan.settings.showUnEquippedEquipment.hint"),scope:"client",config:!0,type:Boolean,default:!1,onChange:t=>{e(t)}})}export{o as CoreActionHandler,n as CoreActionListExtender,i as CoreCategoryManager,r as CorePreRollHandler,a as CoreRollHandler,s as CoreSystemManager,c as CoreUtils,l as Logger,RollHandler,getOptions,getSetting,importClass,localize,register,setSetting};
